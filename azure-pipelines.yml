# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

parameters:
- name: UseCache
  displayName: Use Dependency Cache
  type: boolean
  default: true

variables:
  DEBIAN_FRONTEND: 'noninteractive'

jobs:
  - job: Linux
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
    - checkout: self
      submodules: true
    - task: Bash@3
      displayName: 'apt-get update'
      inputs:
        targetType: 'inline'
        script: 'sudo  apt-get update'
    - task: Bash@3
      displayName: 'apt-get install'
      inputs:
        targetType: 'inline'
        script: 'sudo apt-get install -y cmake libcue-dev, libgme-dev, libfluidsynth-dev, libsmf-dev, libmad0-dev, libid3tag0-dev, libsndfile-dev, libasound2-dev, libjack-dev, libsamplerate0-dev, libmodplug-dev, portaudio19-dev, libebur128-dev, qt5-default, qtbase5-dev, libqt5opengl5-dev'
    - task: CMake@1
      displayName: 'CMake configure'
      inputs:
        cmakeArgs: ..
        workingDirectory: 'build'
    - task: CMake@1
      displayName: 'CMake Build'
      inputs:
        cmakeArgs: --build . --parallel
        workingDirectory: 'build'
    - task: CMake@1
      displayName: 'CMake Check'
      inputs:
        cmakeArgs: --build . --target check --parallel
        workingDirectory: 'build'
  - job: Windows
    timeoutInMinutes: 300
    cancelTimeoutInMinutes: 2
    strategy:
      matrix:
        Win10:
          toolset: 'v142'
          generator: 'Visual Studio 16 2019'
          poo: 'windows-2019'
        Win11:
          toolset: 'v143'
          generator: 'Visual Studio 17 2022'
          poo: 'windows-2022'
    pool:
      vmImage: $(poo)
    variables:
      configuration: 'Release'
      VCPKG_REVISION: '63e935d967a3410e26bf4a708efa39d8384d2bbb'
      platform: 'x64'
      cmake_platform: 'x64'
    steps:
    - checkout: self
      submodules: true
    - task: Cache@2
      displayName: "Cache vcpkg's packages"
      condition: and(not(in(variables['Build.Reason'], 'Schedule')), ${{ parameters.useCache }})
      inputs:
        key: $(VCPKG_REVISION) | "$(platform)" | "$(poo)" | "withstaticlibs"
        path: '$(VCPKG_INSTALLATION_ROOT)\installed'
        cacheHitVar: CACHE_RESTORED
    - bash: |
        set -ex
        echo $(generator)
        echo $(toolset)
        # choco upgrade ninja -y
        # ninja --version
        cmake --version
        rm -rf C:/Strawberry/perl/bin/pkg-config*
        choco install --svc --sdc -i pkgconfiglite make
        # chocoTask=$!
        # manually update vcpkg
        cd $VCPKG_INSTALLATION_ROOT
        # git checkout master
        git remote -v
        git fetch --tags --prune --progress origin
        git checkout --force $(VCPKG_REVISION)
        sed -i 's/arm64/arm/g' ports/glib/portfile.cmake
        ./bootstrap-vcpkg.sh
        # wait $chocoTask
        which pkg-config
      displayName: 'Update vcpkg'
    - bash: |
        set -ex
        vcpkg install sndfile:$(platform)-windows-static libmad:$(platform)-windows-static ffmpeg:$(platform)-windows-static libopenmpt:$(platform)-windows-static portaudio:$(platform)-windows-static libebur128:$(platform)-windows-static
      displayName: 'vcpkg build Dependencies'
      condition: and(succeeded(), ne(variables.CACHE_RESTORED, 'true'))
    - bash: |
        set -ex
        vcpkg install qt5-base:$(platform)-windows-static
      displayName: 'vcpkg build Qt5'
      condition: and(succeeded(), ne(variables.CACHE_RESTORED, 'true'))
    - bash: |
        set -ex
        rm -rf $VCPKG_INSTALLATION_ROOT/installed/$(platform)-windows-static/tools/meson
        rm -rf $VCPKG_INSTALLATION_ROOT/installed/$(platform)-windows-static/doc
        rm -rf $VCPKG_INSTALLATION_ROOT/installed/$(platform)-windows/tools/meson
        rm -rf $VCPKG_INSTALLATION_ROOT/installed/$(platform)-windows/doc
      displayName: 'Cleanup vcpkg dir'
    - task: PublishBuildArtifacts@1
      inputs:
          pathtoPublish: $(VCPKG_INSTALLATION_ROOT)/installed
          artifactName: vcpkg-deps-$(platform)-$(poo)
      condition: or(succeeded(), failed())
      enabled: false
    - bash: |
        set -ex
        mkdir build
        cd build
        export PKG_CONFIG_PATH=$VCPKG_INSTALLATION_ROOT/installed/$(platform)-windows-static/lib/pkgconfig
        cmake -Werror=dev -G "$(generator)" -A "$(cmake_platform)" -T "$(toolset)" -DCMAKE_BUILD_TYPE=$(configuration) -DVCPKG_TARGET_TRIPLET=$(platform)-windows-static -DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake -DCMAKE_INSTALL_PREFIX=$VCPKG_INSTALLATION_ROOT/installed/$(platform)-windows-static -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded -DCMAKE_VERBOSE_MAKEFILE=1 ..
        cmake --build . --config $(configuration) --parallel 3 --target anmp
      displayName: 'Compile static ANMP'
    - task: CopyFiles@2
      continueOnError: true
      inputs:
        SourceFolder: 'build\$(configuration)'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      inputs:
          pathtoPublish: $(Build.ArtifactStagingDirectory)
          artifactName: ANMP-standalone-$(platform)-$(poo)
